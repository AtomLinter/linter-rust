{"reason":"compiler-message","package_id":"fails 0.1.0 (path+file:///home/oak/projects/rust/linter-rust/rust-fails)","target":{"kind":["bin"],"name":"fails","src_path":"main.rs"},"message":{"children":[{"children":[],"code":null,"level":"help","message":"the following implementations were found:","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"  <str as std::cmp::PartialEq<std::ffi::OsString>>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"  <str as std::cmp::PartialEq<std::ffi::OsStr>>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"  <str as std::cmp::PartialEq<std::string::String>>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"  <&'a str as std::cmp::PartialEq<std::string::String>>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"and 3 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `&str: std::cmp::PartialEq<{integer}>` is not satisfied","rendered":null,"spans":[{"byte_end":384,"byte_start":355,"column_end":35,"column_start":6,"expansion":{"def_site_span":{"byte_end":883,"byte_start":245,"column_end":71,"column_start":1,"expansion":null,"file_name":"<std macros>","is_primary":false,"label":null,"line_end":18,"line_start":1,"suggested_replacement":null,"text":[{"highlight_end":40,"highlight_start":1,"text":"( $ left : expr , $ right : expr ) => ("},{"highlight_end":2,"highlight_start":1,"text":"{"},{"highlight_end":33,"highlight_start":1,"text":"match ( & $ left , & $ right ) {"},{"highlight_end":30,"highlight_start":1,"text":"( left_val , right_val ) => {"},{"highlight_end":37,"highlight_start":1,"text":"if ! ( * left_val == * right_val ) {"},{"highlight_end":10,"highlight_start":1,"text":"panic ! ("},{"highlight_end":39,"highlight_start":1,"text":"\"assertion failed: `(left == right)` \\"},{"highlight_end":58,"highlight_start":1,"text":"                           (left: `{:?}`, right: `{:?}`)\""},{"highlight_end":39,"highlight_start":1,"text":", left_val , right_val ) } } } } ) ; ("},{"highlight_end":59,"highlight_start":1,"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) * ) => ("},{"highlight_end":2,"highlight_start":1,"text":"{"},{"highlight_end":41,"highlight_start":1,"text":"match ( & ( $ left ) , & ( $ right ) ) {"},{"highlight_end":30,"highlight_start":1,"text":"( left_val , right_val ) => {"},{"highlight_end":37,"highlight_start":1,"text":"if ! ( * left_val == * right_val ) {"},{"highlight_end":10,"highlight_start":1,"text":"panic ! ("},{"highlight_end":39,"highlight_start":1,"text":"\"assertion failed: `(left == right)` \\"},{"highlight_end":62,"highlight_start":1,"text":"                           (left: `{:?}`, right: `{:?}`): {}\""},{"highlight_end":71,"highlight_start":1,"text":", left_val , right_val , format_args ! ( $ ( $ arg ) * ) ) } } } } ) ;"}]},"macro_decl_name":"assert_eq!","span":{"byte_end":37,"byte_start":16,"column_end":26,"column_start":5,"expansion":null,"file_name":"main.rs","is_primary":false,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"    assert_eq!(\"one\", 1);"}]}},"file_name":"<std macros>","is_primary":true,"label":"the trait `std::cmp::PartialEq<{integer}>` is not implemented for `&str`","line_end":5,"line_start":5,"suggested_replacement":null,"text":[{"highlight_end":35,"highlight_start":6,"text":"if ! ( * left_val == * right_val ) {"}]}]}}
